{"version":3,"sources":["logo.svg","video1.js","video2.js","video3.js","video4.js","roating.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","memo","video","useRef","mainStreamVideo","useState","cameraMode","setCameraMode","useEffect","current","getTracks","stop","pause","mediaStreamConstraints","audio","facingMode","className","ref","node","navigator","mediaDevices","getUserMedia","then","stream","srcObject","play","console","error","muted","playsInline","onClick","forEach","t","postMethod","deviceId","setDeviceId","deviceIdnumber","setDeviceIdnumber","videoDevices","count","exact","Node","gotDevices","mediaDevice","kind","push","log","enumerateDevices","catch","newDeviceIdNumber","WebcamCapture","webcamRef","React","setFacingMode","videoConstraints","width","height","getSupportedConstraints","screenshotFormat","videoElm","defaultsOpts","shouldFaceUser","setShouldFaceUser","webkitGetUserMedia","mozGetUserMedia","ideal","_stream","err","alert","name","App","setVideoDevices","videoDevicesState","setVideoDevicesState","_videoDevices","to","path","MobileDetect","window","userAgent","mobile","map","item","index","key","label","document","getElementsByClassName","style","innerHeight","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.68a7e032.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { memo, useEffect, useRef, useState } from \"react\";\r\nimport \"./App.css\";\r\n\r\nconst Video1 = () => {\r\n  const video = useRef(null);\r\n  const mainStreamVideo = useRef(null);\r\n  const [cameraMode, setCameraMode] = useState(\"user\");\r\n  useEffect(() => {\r\n    return () => {\r\n      mainStreamVideo.current.getTracks()[0].stop();\r\n      video.current.pause();\r\n    };\r\n  }, []);\r\n  const handleSwitchCamera = () => {\r\n    mainStreamVideo.current.getTracks().forEach(t => {\r\n      t.stop();\r\n    });\r\n    if (cameraMode === \"user\") {\r\n      setCameraMode(\"environment\");\r\n    } else {\r\n      setCameraMode(\"user\");\r\n    }\r\n  };\r\n  const mediaStreamConstraints = {\r\n    audio: false,\r\n    video: {\r\n      facingMode: cameraMode,\r\n    },\r\n  };\r\n\r\n  const videoRef = (node) => {\r\n    if (node !== null) {\r\n      navigator.mediaDevices\r\n        .getUserMedia(mediaStreamConstraints)\r\n        .then((stream) => {\r\n          video.current = node;\r\n          mainStreamVideo.current = stream;\r\n          node.srcObject = stream;\r\n          node.play();\r\n        }, console.error);\r\n    }\r\n  };\r\n  return (\r\n    <div className=\"video1\">\r\n      <video ref={videoRef} muted playsInline />\r\n      <button onClick={handleSwitchCamera}>Switch)</button>\r\n    </div>\r\n  );\r\n};\r\nexport default memo(Video1);\r\n","import React, { memo, useEffect, useRef, useState } from \"react\";\r\nimport \"./App.css\";\r\n\r\nconst Video1 = ({ postMethod }) => {\r\n  const convasVideoPageRef = useRef(null);\r\n  const video = useRef(null);\r\n  const mainStreamVideo = useRef(null);\r\n  const [deviceId, setDeviceId] = useState('');\r\n  const [deviceIdnumber, setDeviceIdnumber] = useState(0);\r\n  const videoDevices = [];\r\n  let mainStream;\r\n  let count = 0;\r\n  useEffect(() => {\r\n    return () => {\r\n      mainStreamVideo.current.getTracks()[0].stop();\r\n      video.current.pause();\r\n    };\r\n  }, []);\r\n  const handleSwitchCamera = () => {\r\n    mainStreamVideo.getTracks().forEach(t => {\r\n      t.stop();\r\n    });\r\n    const newDeviceIdNumber = deviceIdnumber + 1 === count?0:deviceIdnumber + 1 ;\r\n    setDeviceId(videoDevices[newDeviceIdNumber]);\r\n    setDeviceIdnumber(newDeviceIdNumber);\r\n  };\r\n  const mediaStreamConstraints = {\r\n    audio: false,\r\n    video: {\r\n      deviceId : { exact: deviceId }\r\n    }\r\n  };\r\n  let Node = null;\r\n  function gotDevices(mediaDevices) {\r\n    mediaDevices.forEach(mediaDevice => {\r\n      if (mediaDevice.kind === 'videoinput') {\r\n        videoDevices.push(mediaDevice.deviceId);\r\n        count++;\r\n      }\r\n    });\r\n    console.log('videoDevices-', videoDevices);\r\n    mediaStreamConstraints.video.deviceId.exact = videoDevices[deviceIdnumber];\r\n    //setDeviceId(videoDevices[0]);\r\n    navigator.mediaDevices\r\n      .getUserMedia(mediaStreamConstraints)\r\n      .then(stream => {\r\n        video.current = Node;\r\n\r\n        mainStreamVideo.current = stream;\r\n        Node.srcObject = stream;\r\n        mainStream = Node;\r\n        return navigator.mediaDevices.enumerateDevices();\r\n      })\r\n      \r\n      .catch(error => {\r\n        console.error(error);\r\n      });\r\n  }\r\n  const videoRef = (node) => {\r\n    if (node !== null) {\r\n      Node = node;\r\n      navigator.mediaDevices.enumerateDevices()\r\n      .then(gotDevices)\r\n      \r\n    }\r\n  };\r\n  return (\r\n    <div className=\"video1\">\r\n      <video ref={videoRef} muted playsInline />\r\n      <button onClick={handleSwitchCamera}>Switch))</button>\r\n    </div>\r\n  );\r\n};\r\nexport default memo(Video1);\r\n","import React, { memo, useEffect, useRef, useState } from \"react\";\r\nimport Webcam from \"react-webcam\";\r\nimport \"./App.css\";\r\n\r\n\r\nconst WebcamCapture = () => {\r\n    const webcamRef = React.useRef(null);\r\n    const [facingMode, setFacingMode] = useState(\"user\")\r\n    const videoConstraints = {\r\n        width: 1280,\r\n        height: 720,\r\n        facingMode\r\n    };\r\n    let supports = navigator.mediaDevices.getSupportedConstraints();\r\n    if (supports['facingMode'] === true) {\r\n        debugger;\r\n    }\r\n    const capture = () => {\r\n        if (facingMode === \"user\") {\r\n            setFacingMode(\"environment\")\r\n        } else {\r\n            setFacingMode(\"user\")\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Webcam\r\n                className='video1'\r\n                audio={false}\r\n                height={250}\r\n                ref={webcamRef}\r\n                screenshotFormat=\"image/jpeg\"\r\n                width={400}\r\n                videoConstraints={videoConstraints}\r\n            />\r\n            <button onClick={capture}>Switch)))</button>\r\n        </>\r\n    );\r\n};\r\nexport default WebcamCapture;","import React, { memo, useEffect, useRef, useState } from \"react\";\r\nimport \"./App.css\";\r\n\r\nconst Video4 = () => {\r\n  // camera stream video element\r\n  const videoElm = useRef(null)\r\n  // flip button element\r\n  //let flipBtn = document.querySelector('#flip-btn');\r\n\r\n  // default user media options\r\n  let defaultsOpts = { audio: false, video: true }\r\n  let [shouldFaceUser, setShouldFaceUser] = useState(true);\r\n\r\n  // check whether we can use facingMode\r\n  let supports = navigator.mediaDevices.getSupportedConstraints();\r\n  if (supports['facingMode'] === true) {\r\n    //alert(`your device support facingMode`)\r\n  }\r\n\r\n  let stream = null;\r\n  navigator.getUserMedia = navigator.getUserMedia ||\r\n    navigator.webkitGetUserMedia ||\r\n    navigator.mozGetUserMedia;\r\n\r\n  defaultsOpts.video = { facingMode: shouldFaceUser ? 'user' : 'environment', width: { ideal: 4096 }, height: { ideal: 2160 } }\r\n  if (typeof navigator.mediaDevices.getUserMedia === \"function\") {\r\n    navigator.mediaDevices.getUserMedia(defaultsOpts)\r\n      .then(function (_stream) {\r\n        stream = _stream;\r\n        videoElm.current.srcObject = stream;\r\n        videoElm.current.play();\r\n      })\r\n      .catch(function (err) {\r\n        console.log(err)\r\n      });\r\n\r\n  } else {\r\n    alert('1');\r\n    navigator.getUserMedia(defaultsOpts,\r\n      function (_stream) {\r\n        stream = _stream;\r\n        videoElm.current.srcObject = stream;\r\n        videoElm.current.play();\r\n      },\r\n      function (err) {\r\n        console.log(\"The following error occurred: \" + err.name);\r\n      }\r\n    );\r\n  }\r\n  const handleSwitchCamera = function () {\r\n    if (stream == null) return\r\n    // we need to flip, stop everything\r\n    stream.getTracks().forEach(t => {\r\n      t.stop();\r\n    });\r\n    // toggle / flip\r\n    setShouldFaceUser(!shouldFaceUser);\r\n\r\n  }\r\n  return (\r\n    <div className=\"video1\">\r\n      <video ref={videoElm} muted playsInline />\r\n      <button onClick={handleSwitchCamera}>Switch))))</button>\r\n    </div>\r\n  );\r\n};\r\nexport default memo(Video4);\r\n","import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Link\r\n} from \"react-router-dom\";\r\nimport Video1 from './video1'\r\nimport Video2 from './video2'\r\nimport Video3 from './video3'\r\nimport Video4 from './video4'\r\nimport './App.css'\r\nimport MobileDetect from 'mobile-detect'\r\n\r\nexport default function App() {\r\n  const [videoDevices, setVideoDevices] = useState([])\r\n  const [videoDevicesState, setVideoDevicesState] = useState(0)\r\n  function gotDevices(mediaDevices) {\r\n    let _videoDevices = []\r\n    mediaDevices.forEach(mediaDevice => {\r\n      if (mediaDevice.kind === 'videoinput') {\r\n        _videoDevices.push(mediaDevice);\r\n      }\r\n    });\r\n    setVideoDevicesState(1)\r\n    setVideoDevices(_videoDevices);\r\n  }\r\n  useEffect(() => {\r\n    if (videoDevicesState === 0) {\r\n      navigator.mediaDevices.enumerateDevices()\r\n        .then(gotDevices)\r\n    }\r\n  }, [videoDevicesState])\r\n  const handleCheckFocus = () => {\r\n    let supports = navigator.mediaDevices.getSupportedConstraints();\r\n    if (supports['focusMode'] === true) {\r\n      alert('your device supported focusMode')\r\n    } else {\r\n      alert('your device did not supported focusMode')\r\n    }\r\n  }\r\n  const handleCheckMobile = () => {\r\n   alert(new MobileDetect(window.navigator.userAgent).mobile())\r\n  }\r\n  const handleCheckMediaStream = () => {\r\n    if (typeof navigator.mediaDevices.getUserMedia === \"function\") {\r\n      alert('your device supported MediaStream')\r\n    } else {\r\n      alert('your device did not supported MediaStream')\r\n    }\r\n  }\r\n  const handleCheckGetUserMedia = () => {\r\n    if (typeof navigator.getUserMedia === \"function\") {\r\n      alert('your device supported getUserMedia')\r\n    } else {\r\n      alert('your device did not supported getUserMedia')\r\n    }\r\n  }\r\n  const handleCheckFocusDistance = () => {\r\n    let supports = navigator.mediaDevices.getSupportedConstraints();\r\n    if (supports['focusDistance'] === true) {\r\n      alert('your device supported focusDistance')\r\n    } else {\r\n      alert('your device did not supported focusDistance')\r\n    }\r\n  }\r\n  return (\r\n    <Router>\r\n      <div className='router'>\r\n        <nav>\r\n          <ul>\r\n            <li>\r\n              <Link to=\"/videoTest\">Home</Link>\r\n            </li>\r\n            <li>\r\n              <Link to=\"/video1\">Variant 1</Link>\r\n            </li>\r\n            <li>\r\n              <Link to=\"/video2\">Variant 2</Link>\r\n            </li>\r\n            <li>\r\n              <Link to=\"/video3\">Variant 3</Link>\r\n            </li>\r\n            <li>\r\n              <Link to=\"/video4\">Variant 4</Link>\r\n            </li>\r\n          </ul>\r\n        </nav>\r\n\r\n        {/* A <Switch> looks through its children <Route>s and\r\n            renders the first one that matches the current URL. */}\r\n        <Switch>\r\n          <Route path=\"/video1\">\r\n            <Video4 />\r\n          </Route>\r\n          <Route path=\"/video2\">\r\n            <Video2 />\r\n          </Route>\r\n          <Route path=\"/video3\">\r\n            <Video3 />\r\n          </Route>\r\n          <Route path=\"/video4\">\r\n            <Video1 />\r\n          </Route>\r\n          <Route path=\"/videoTest\">\r\n            <h1>Квест, найди рабочий вариант, где работает смена камеры)</h1>\r\n            <button onClick={handleCheckFocus}>check focusMode</button>\r\n            <button onClick={handleCheckFocusDistance}>check focusDistance</button>\r\n            <button onClick={handleCheckMediaStream}>check MediaStream</button>\r\n            <button onClick={handleCheckGetUserMedia}>check getUserMedia</button>\r\n            <button onClick={handleCheckMobile}>is it mobile?</button>\r\n            <br />\r\n            <ul>\r\n              {\r\n                videoDevices.map((item, index) => {\r\n                  return (<li key={`${item.label}${index}`}>{item.label}</li>)\r\n                })}\r\n            </ul>\r\n            <h5>version-1.6</h5>\r\n          </Route>\r\n        </Switch>\r\n      </div>\r\n    </Router>\r\n  );\r\n}\r\n\r\n","import React, {useEffect} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Video1 from './video1'\nimport Root from './roating'\n\nfunction App() {\n  useEffect(()=>{\n    document.getElementsByClassName('App')[0].style.height= window.innerHeight + 'px';\n    //alert(window.innerHeight)\n  })\n\n  return (\n    <div className=\"App\">\n      <Root />\n    </div>\n  );\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}